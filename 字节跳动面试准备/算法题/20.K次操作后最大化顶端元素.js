//LC 2202 K次操作后最大的顶端元素。
var maximumTop = function (nums, k) {
  const n = nums.length;
  if (n === 1 && k & (1 === 1)) return -1; //特殊情况： 如果k为奇数 数组里只有一个值 直接返回-1；因为数组k次操作后为空；

  //然后讨论数组长度n和k的大小；当n大于k时能取到k索引的值和前面k-1个索引对应的值作比较 选出最大值，
  //否则就可以取数组第一个值作为初始最大值，然后前n个值比较，选出最大值
  let max = n > k ? nums[k] : nums[0];
  for (let i = 0; i < n && i < k - 1; i++) {
    max = Math.max(max, nums[i]);
  }
  return max;
};

// 示例 1：

// 输入：nums = [5,2,2,4,0,6], k = 4
// 输出：5
// 解释：
// 4 次操作后，栈顶元素为 5 的方法之一为：
// - 第 1 次操作：删除栈顶元素 5 ，栈变为 [2,2,4,0,6] 。
// - 第 2 次操作：删除栈顶元素 2 ，栈变为 [2,4,0,6] 。
// - 第 3 次操作：删除栈顶元素 2 ，栈变为 [4,0,6] 。
// - 第 4 次操作：将 5 添加回栈顶，栈变为 [5,4,0,6] 。
// 注意，这不是最后栈顶元素为 5 的唯一方式。但可以证明，4 次操作以后 5 是能得到的最大栈顶元素。
